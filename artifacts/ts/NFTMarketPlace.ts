/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as NFTMarketPlaceContractJson } from "../marketplace/nft_marketplace.ral.json";

// Custom types for the contract
export namespace NFTMarketPlaceTypes {
  export type Fields = {
    nftListingTemplateId: HexString;
    admin: HexString;
    listingFee: bigint;
    commissionRate: bigint;
  };

  export type State = ContractState<Fields>;

  export type NFTListedEvent = ContractEvent<{
    price: bigint;
    tokenId: HexString;
    tokenOwner: HexString;
    listingContractId: HexString;
  }>;
  export type NFTSoldEvent = ContractEvent<{
    price: bigint;
    tokenId: HexString;
    previousOwner: HexString;
    newOwner: HexString;
  }>;
  export type NFTListingCancelledEvent = ContractEvent<{
    tokenId: HexString;
    tokenOwner: HexString;
  }>;
  export type NFTListingPriceUpdatedEvent = ContractEvent<{
    tokenId: HexString;
    oldPrice: bigint;
    newPrice: bigint;
  }>;
  export type AdminUpdatedEvent = ContractEvent<{
    previous: HexString;
    new: HexString;
  }>;
  export type ListingFeeUpdatedEvent = ContractEvent<{
    previous: bigint;
    new: bigint;
  }>;
  export type CommissionRateUpdatedEvent = ContractEvent<{
    previous: bigint;
    new: bigint;
  }>;

  export interface CallMethodTable {
    listNFT: {
      params: CallContractParams<{ tokenId: HexString; price: bigint }>;
      result: CallContractResult<HexString>;
    };
    getListingFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  NFTMarketPlaceInstance,
  NFTMarketPlaceTypes.Fields
> {
  at(address: string): NFTMarketPlaceInstance {
    return new NFTMarketPlaceInstance(address);
  }

  async testBuyNFTMethod(
    params: TestContractParams<
      NFTMarketPlaceTypes.Fields,
      { tokenId: HexString; totalPayment: bigint }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "buyNFT", params);
  }

  async testPayCommissionMethod(
    params: TestContractParams<
      NFTMarketPlaceTypes.Fields,
      { buyer: HexString; commission: bigint }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "payCommission", params);
  }

  async testListNFTMethod(
    params: TestContractParams<
      NFTMarketPlaceTypes.Fields,
      { tokenId: HexString; price: bigint }
    >
  ): Promise<TestContractResult<HexString>> {
    return testMethod(this, "listNFT", params);
  }

  async testCancelNFTListingMethod(
    params: TestContractParams<
      NFTMarketPlaceTypes.Fields,
      { tokenId: HexString }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "cancelNFTListing", params);
  }

  async testUpdateNFTPriceMethod(
    params: TestContractParams<
      NFTMarketPlaceTypes.Fields,
      { tokenId: HexString; newPrice: bigint }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "updateNFTPrice", params);
  }

  async testUpdateAdminMethod(
    params: TestContractParams<
      NFTMarketPlaceTypes.Fields,
      { newAdmin: HexString }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "updateAdmin", params);
  }

  async testUpdateListingFeeMethod(
    params: TestContractParams<
      NFTMarketPlaceTypes.Fields,
      { newListingFee: bigint }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "updateListingFee", params);
  }

  async testUpdateCommissionRateMethod(
    params: TestContractParams<
      NFTMarketPlaceTypes.Fields,
      { newCommissionRate: bigint }
    >
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "updateCommissionRate", params);
  }

  async testGetListingFeeMethod(
    params: Omit<
      TestContractParams<NFTMarketPlaceTypes.Fields, never>,
      "testArgs"
    >
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "getListingFee", params);
  }
}

// Use this object to test and deploy the contract
export const NFTMarketPlace = new Factory(
  Contract.fromJson(
    NFTMarketPlaceContractJson,
    "",
    "049c3c68475084d65fed590cb364769235076dae10a724bcebfa079765a7e30f"
  )
);

// Use this class to interact with the blockchain
export class NFTMarketPlaceInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NFTMarketPlaceTypes.State> {
    return fetchContractState(NFTMarketPlace, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeNFTListedEvent(
    options: SubscribeOptions<NFTMarketPlaceTypes.NFTListedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTMarketPlace.contract,
      this,
      options,
      "NFTListed",
      fromCount
    );
  }

  subscribeNFTSoldEvent(
    options: SubscribeOptions<NFTMarketPlaceTypes.NFTSoldEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTMarketPlace.contract,
      this,
      options,
      "NFTSold",
      fromCount
    );
  }

  subscribeNFTListingCancelledEvent(
    options: SubscribeOptions<NFTMarketPlaceTypes.NFTListingCancelledEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTMarketPlace.contract,
      this,
      options,
      "NFTListingCancelled",
      fromCount
    );
  }

  subscribeNFTListingPriceUpdatedEvent(
    options: SubscribeOptions<NFTMarketPlaceTypes.NFTListingPriceUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTMarketPlace.contract,
      this,
      options,
      "NFTListingPriceUpdated",
      fromCount
    );
  }

  subscribeAdminUpdatedEvent(
    options: SubscribeOptions<NFTMarketPlaceTypes.AdminUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTMarketPlace.contract,
      this,
      options,
      "AdminUpdated",
      fromCount
    );
  }

  subscribeListingFeeUpdatedEvent(
    options: SubscribeOptions<NFTMarketPlaceTypes.ListingFeeUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTMarketPlace.contract,
      this,
      options,
      "ListingFeeUpdated",
      fromCount
    );
  }

  subscribeCommissionRateUpdatedEvent(
    options: SubscribeOptions<NFTMarketPlaceTypes.CommissionRateUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTMarketPlace.contract,
      this,
      options,
      "CommissionRateUpdated",
      fromCount
    );
  }

  subscribeAllEvents(
    options: SubscribeOptions<
      | NFTMarketPlaceTypes.NFTListedEvent
      | NFTMarketPlaceTypes.NFTSoldEvent
      | NFTMarketPlaceTypes.NFTListingCancelledEvent
      | NFTMarketPlaceTypes.NFTListingPriceUpdatedEvent
      | NFTMarketPlaceTypes.AdminUpdatedEvent
      | NFTMarketPlaceTypes.ListingFeeUpdatedEvent
      | NFTMarketPlaceTypes.CommissionRateUpdatedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      NFTMarketPlace.contract,
      this,
      options,
      fromCount
    );
  }

  async callListNFTMethod(
    params: NFTMarketPlaceTypes.CallMethodParams<"listNFT">
  ): Promise<NFTMarketPlaceTypes.CallMethodResult<"listNFT">> {
    return callMethod(NFTMarketPlace, this, "listNFT", params);
  }

  async callGetListingFeeMethod(
    params?: NFTMarketPlaceTypes.CallMethodParams<"getListingFee">
  ): Promise<NFTMarketPlaceTypes.CallMethodResult<"getListingFee">> {
    return callMethod(
      NFTMarketPlace,
      this,
      "getListingFee",
      params === undefined ? {} : params
    );
  }

  async multicall<Calls extends NFTMarketPlaceTypes.MultiCallParams>(
    calls: Calls
  ): Promise<NFTMarketPlaceTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      NFTMarketPlace,
      this,
      calls
    )) as NFTMarketPlaceTypes.MultiCallResults<Calls>;
  }
}
