/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as NFTMarketPlaceContractJson } from "../marketplace/NFTMarketPlace.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace NFTMarketPlaceTypes {
  export type Fields = {
    nftListingTemplateId: HexString;
    admin: Address;
    commissionRate: bigint;
  };

  export type State = ContractState<Fields>;

  export type NFTListedEvent = ContractEvent<{
    price: bigint;
    tokenId: HexString;
    tokenOwner: Address;
    listingContractId: HexString;
  }>;
  export type NFTSoldEvent = ContractEvent<{
    price: bigint;
    tokenId: HexString;
    previousOwner: Address;
    newOwner: Address;
  }>;
  export type NFTListingCancelledEvent = ContractEvent<{
    tokenId: HexString;
    tokenOwner: Address;
  }>;
  export type NFTListingPriceUpdatedEvent = ContractEvent<{
    tokenId: HexString;
    oldPrice: bigint;
    newPrice: bigint;
  }>;
  export type AdminUpdatedEvent = ContractEvent<{
    previous: Address;
    new: Address;
  }>;
  export type CommissionRateUpdatedEvent = ContractEvent<{
    previous: bigint;
    new: bigint;
  }>;

  export interface CallMethodTable {
    getPriceAfterFee: {
      params: CallContractParams<{
        priceIn: bigint;
        commissionRateIn: bigint;
        royaltyAmount: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    getRoyaltyAmount: {
      params: CallContractParams<{
        tokenIdIn: HexString;
        collectionId: HexString;
        priceIn: bigint;
        requiresRoyalty: boolean;
      }>;
      result: CallContractResult<bigint>;
    };
    buyNFT: {
      params: CallContractParams<{ tokenId: HexString }>;
      result: CallContractResult<null>;
    };
    listNFT: {
      params: CallContractParams<{
        tokenId: HexString;
        price: bigint;
        royalty: boolean;
      }>;
      result: CallContractResult<Address>;
    };
    cancelNFTListing: {
      params: CallContractParams<{ tokenId: HexString }>;
      result: CallContractResult<null>;
    };
    updateNFTPrice: {
      params: CallContractParams<{ tokenId: HexString; newPrice: bigint }>;
      result: CallContractResult<null>;
    };
    updateAdmin: {
      params: CallContractParams<{ newAdmin: Address }>;
      result: CallContractResult<null>;
    };
    updateCommissionRate: {
      params: CallContractParams<{ newCommissionRate: bigint }>;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: CallContractParams<{ to: Address; amount: bigint }>;
      result: CallContractResult<null>;
    };
    getCollectionId: {
      params: CallContractParams<{ tokenId: HexString }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getPriceAfterFee: {
      params: SignExecuteContractMethodParams<{
        priceIn: bigint;
        commissionRateIn: bigint;
        royaltyAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getRoyaltyAmount: {
      params: SignExecuteContractMethodParams<{
        tokenIdIn: HexString;
        collectionId: HexString;
        priceIn: bigint;
        requiresRoyalty: boolean;
      }>;
      result: SignExecuteScriptTxResult;
    };
    buyNFT: {
      params: SignExecuteContractMethodParams<{ tokenId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    listNFT: {
      params: SignExecuteContractMethodParams<{
        tokenId: HexString;
        price: bigint;
        royalty: boolean;
      }>;
      result: SignExecuteScriptTxResult;
    };
    cancelNFTListing: {
      params: SignExecuteContractMethodParams<{ tokenId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    updateNFTPrice: {
      params: SignExecuteContractMethodParams<{
        tokenId: HexString;
        newPrice: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    updateAdmin: {
      params: SignExecuteContractMethodParams<{ newAdmin: Address }>;
      result: SignExecuteScriptTxResult;
    };
    updateCommissionRate: {
      params: SignExecuteContractMethodParams<{ newCommissionRate: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: SignExecuteContractMethodParams<{ to: Address; amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    getCollectionId: {
      params: SignExecuteContractMethodParams<{ tokenId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  NFTMarketPlaceInstance,
  NFTMarketPlaceTypes.Fields
> {
  encodeFields(fields: NFTMarketPlaceTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  eventIndex = {
    NFTListed: 0,
    NFTSold: 1,
    NFTListingCancelled: 2,
    NFTListingPriceUpdated: 3,
    AdminUpdated: 4,
    CommissionRateUpdated: 5,
  };
  consts = {
    ErrorCodes: {
      NFTPriceTooLow: BigInt("2"),
      AdminAllowedOnly: BigInt("0"),
      TokenOwnerAllowedOnly: BigInt("1"),
    },
  };

  at(address: string): NFTMarketPlaceInstance {
    return new NFTMarketPlaceInstance(address);
  }

  tests = {
    getPriceAfterFee: async (
      params: TestContractParamsWithoutMaps<
        NFTMarketPlaceTypes.Fields,
        { priceIn: bigint; commissionRateIn: bigint; royaltyAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getPriceAfterFee",
        params,
        getContractByCodeHash
      );
    },
    getRoyaltyAmount: async (
      params: TestContractParamsWithoutMaps<
        NFTMarketPlaceTypes.Fields,
        {
          tokenIdIn: HexString;
          collectionId: HexString;
          priceIn: bigint;
          requiresRoyalty: boolean;
        }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getRoyaltyAmount",
        params,
        getContractByCodeHash
      );
    },
    buyNFT: async (
      params: TestContractParamsWithoutMaps<
        NFTMarketPlaceTypes.Fields,
        { tokenId: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "buyNFT", params, getContractByCodeHash);
    },
    listNFT: async (
      params: TestContractParamsWithoutMaps<
        NFTMarketPlaceTypes.Fields,
        { tokenId: HexString; price: bigint; royalty: boolean }
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "listNFT", params, getContractByCodeHash);
    },
    cancelNFTListing: async (
      params: TestContractParamsWithoutMaps<
        NFTMarketPlaceTypes.Fields,
        { tokenId: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "cancelNFTListing",
        params,
        getContractByCodeHash
      );
    },
    updateNFTPrice: async (
      params: TestContractParamsWithoutMaps<
        NFTMarketPlaceTypes.Fields,
        { tokenId: HexString; newPrice: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "updateNFTPrice", params, getContractByCodeHash);
    },
    updateAdmin: async (
      params: TestContractParamsWithoutMaps<
        NFTMarketPlaceTypes.Fields,
        { newAdmin: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "updateAdmin", params, getContractByCodeHash);
    },
    updateCommissionRate: async (
      params: TestContractParamsWithoutMaps<
        NFTMarketPlaceTypes.Fields,
        { newCommissionRate: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "updateCommissionRate",
        params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params: TestContractParamsWithoutMaps<
        NFTMarketPlaceTypes.Fields,
        { to: Address; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    getCollectionId: async (
      params: TestContractParamsWithoutMaps<
        NFTMarketPlaceTypes.Fields,
        { tokenId: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getCollectionId", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: NFTMarketPlaceTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const NFTMarketPlace = new Factory(
  Contract.fromJson(
    NFTMarketPlaceContractJson,
    "",
    "58b1fe54c48ae9100e522bd453d4043e9f20676d81c6b5d895d97ca037496263",
    []
  )
);
registerContract(NFTMarketPlace);

// Use this class to interact with the blockchain
export class NFTMarketPlaceInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NFTMarketPlaceTypes.State> {
    return fetchContractState(NFTMarketPlace, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeNFTListedEvent(
    options: EventSubscribeOptions<NFTMarketPlaceTypes.NFTListedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTMarketPlace.contract,
      this,
      options,
      "NFTListed",
      fromCount
    );
  }

  subscribeNFTSoldEvent(
    options: EventSubscribeOptions<NFTMarketPlaceTypes.NFTSoldEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTMarketPlace.contract,
      this,
      options,
      "NFTSold",
      fromCount
    );
  }

  subscribeNFTListingCancelledEvent(
    options: EventSubscribeOptions<NFTMarketPlaceTypes.NFTListingCancelledEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTMarketPlace.contract,
      this,
      options,
      "NFTListingCancelled",
      fromCount
    );
  }

  subscribeNFTListingPriceUpdatedEvent(
    options: EventSubscribeOptions<NFTMarketPlaceTypes.NFTListingPriceUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTMarketPlace.contract,
      this,
      options,
      "NFTListingPriceUpdated",
      fromCount
    );
  }

  subscribeAdminUpdatedEvent(
    options: EventSubscribeOptions<NFTMarketPlaceTypes.AdminUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTMarketPlace.contract,
      this,
      options,
      "AdminUpdated",
      fromCount
    );
  }

  subscribeCommissionRateUpdatedEvent(
    options: EventSubscribeOptions<NFTMarketPlaceTypes.CommissionRateUpdatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTMarketPlace.contract,
      this,
      options,
      "CommissionRateUpdated",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | NFTMarketPlaceTypes.NFTListedEvent
      | NFTMarketPlaceTypes.NFTSoldEvent
      | NFTMarketPlaceTypes.NFTListingCancelledEvent
      | NFTMarketPlaceTypes.NFTListingPriceUpdatedEvent
      | NFTMarketPlaceTypes.AdminUpdatedEvent
      | NFTMarketPlaceTypes.CommissionRateUpdatedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      NFTMarketPlace.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    getPriceAfterFee: async (
      params: NFTMarketPlaceTypes.CallMethodParams<"getPriceAfterFee">
    ): Promise<NFTMarketPlaceTypes.CallMethodResult<"getPriceAfterFee">> => {
      return callMethod(
        NFTMarketPlace,
        this,
        "getPriceAfterFee",
        params,
        getContractByCodeHash
      );
    },
    getRoyaltyAmount: async (
      params: NFTMarketPlaceTypes.CallMethodParams<"getRoyaltyAmount">
    ): Promise<NFTMarketPlaceTypes.CallMethodResult<"getRoyaltyAmount">> => {
      return callMethod(
        NFTMarketPlace,
        this,
        "getRoyaltyAmount",
        params,
        getContractByCodeHash
      );
    },
    buyNFT: async (
      params: NFTMarketPlaceTypes.CallMethodParams<"buyNFT">
    ): Promise<NFTMarketPlaceTypes.CallMethodResult<"buyNFT">> => {
      return callMethod(
        NFTMarketPlace,
        this,
        "buyNFT",
        params,
        getContractByCodeHash
      );
    },
    listNFT: async (
      params: NFTMarketPlaceTypes.CallMethodParams<"listNFT">
    ): Promise<NFTMarketPlaceTypes.CallMethodResult<"listNFT">> => {
      return callMethod(
        NFTMarketPlace,
        this,
        "listNFT",
        params,
        getContractByCodeHash
      );
    },
    cancelNFTListing: async (
      params: NFTMarketPlaceTypes.CallMethodParams<"cancelNFTListing">
    ): Promise<NFTMarketPlaceTypes.CallMethodResult<"cancelNFTListing">> => {
      return callMethod(
        NFTMarketPlace,
        this,
        "cancelNFTListing",
        params,
        getContractByCodeHash
      );
    },
    updateNFTPrice: async (
      params: NFTMarketPlaceTypes.CallMethodParams<"updateNFTPrice">
    ): Promise<NFTMarketPlaceTypes.CallMethodResult<"updateNFTPrice">> => {
      return callMethod(
        NFTMarketPlace,
        this,
        "updateNFTPrice",
        params,
        getContractByCodeHash
      );
    },
    updateAdmin: async (
      params: NFTMarketPlaceTypes.CallMethodParams<"updateAdmin">
    ): Promise<NFTMarketPlaceTypes.CallMethodResult<"updateAdmin">> => {
      return callMethod(
        NFTMarketPlace,
        this,
        "updateAdmin",
        params,
        getContractByCodeHash
      );
    },
    updateCommissionRate: async (
      params: NFTMarketPlaceTypes.CallMethodParams<"updateCommissionRate">
    ): Promise<
      NFTMarketPlaceTypes.CallMethodResult<"updateCommissionRate">
    > => {
      return callMethod(
        NFTMarketPlace,
        this,
        "updateCommissionRate",
        params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params: NFTMarketPlaceTypes.CallMethodParams<"withdraw">
    ): Promise<NFTMarketPlaceTypes.CallMethodResult<"withdraw">> => {
      return callMethod(
        NFTMarketPlace,
        this,
        "withdraw",
        params,
        getContractByCodeHash
      );
    },
    getCollectionId: async (
      params: NFTMarketPlaceTypes.CallMethodParams<"getCollectionId">
    ): Promise<NFTMarketPlaceTypes.CallMethodResult<"getCollectionId">> => {
      return callMethod(
        NFTMarketPlace,
        this,
        "getCollectionId",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getPriceAfterFee: async (
      params: NFTMarketPlaceTypes.SignExecuteMethodParams<"getPriceAfterFee">
    ): Promise<
      NFTMarketPlaceTypes.SignExecuteMethodResult<"getPriceAfterFee">
    > => {
      return signExecuteMethod(
        NFTMarketPlace,
        this,
        "getPriceAfterFee",
        params
      );
    },
    getRoyaltyAmount: async (
      params: NFTMarketPlaceTypes.SignExecuteMethodParams<"getRoyaltyAmount">
    ): Promise<
      NFTMarketPlaceTypes.SignExecuteMethodResult<"getRoyaltyAmount">
    > => {
      return signExecuteMethod(
        NFTMarketPlace,
        this,
        "getRoyaltyAmount",
        params
      );
    },
    buyNFT: async (
      params: NFTMarketPlaceTypes.SignExecuteMethodParams<"buyNFT">
    ): Promise<NFTMarketPlaceTypes.SignExecuteMethodResult<"buyNFT">> => {
      return signExecuteMethod(NFTMarketPlace, this, "buyNFT", params);
    },
    listNFT: async (
      params: NFTMarketPlaceTypes.SignExecuteMethodParams<"listNFT">
    ): Promise<NFTMarketPlaceTypes.SignExecuteMethodResult<"listNFT">> => {
      return signExecuteMethod(NFTMarketPlace, this, "listNFT", params);
    },
    cancelNFTListing: async (
      params: NFTMarketPlaceTypes.SignExecuteMethodParams<"cancelNFTListing">
    ): Promise<
      NFTMarketPlaceTypes.SignExecuteMethodResult<"cancelNFTListing">
    > => {
      return signExecuteMethod(
        NFTMarketPlace,
        this,
        "cancelNFTListing",
        params
      );
    },
    updateNFTPrice: async (
      params: NFTMarketPlaceTypes.SignExecuteMethodParams<"updateNFTPrice">
    ): Promise<
      NFTMarketPlaceTypes.SignExecuteMethodResult<"updateNFTPrice">
    > => {
      return signExecuteMethod(NFTMarketPlace, this, "updateNFTPrice", params);
    },
    updateAdmin: async (
      params: NFTMarketPlaceTypes.SignExecuteMethodParams<"updateAdmin">
    ): Promise<NFTMarketPlaceTypes.SignExecuteMethodResult<"updateAdmin">> => {
      return signExecuteMethod(NFTMarketPlace, this, "updateAdmin", params);
    },
    updateCommissionRate: async (
      params: NFTMarketPlaceTypes.SignExecuteMethodParams<"updateCommissionRate">
    ): Promise<
      NFTMarketPlaceTypes.SignExecuteMethodResult<"updateCommissionRate">
    > => {
      return signExecuteMethod(
        NFTMarketPlace,
        this,
        "updateCommissionRate",
        params
      );
    },
    withdraw: async (
      params: NFTMarketPlaceTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<NFTMarketPlaceTypes.SignExecuteMethodResult<"withdraw">> => {
      return signExecuteMethod(NFTMarketPlace, this, "withdraw", params);
    },
    getCollectionId: async (
      params: NFTMarketPlaceTypes.SignExecuteMethodParams<"getCollectionId">
    ): Promise<
      NFTMarketPlaceTypes.SignExecuteMethodResult<"getCollectionId">
    > => {
      return signExecuteMethod(NFTMarketPlace, this, "getCollectionId", params);
    },
  };

  async multicall<Calls extends NFTMarketPlaceTypes.MultiCallParams>(
    calls: Calls
  ): Promise<NFTMarketPlaceTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends NFTMarketPlaceTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<NFTMarketPlaceTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | NFTMarketPlaceTypes.MultiCallParams
      | NFTMarketPlaceTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      NFTMarketPlace,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
