/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { RunScriptResult, DeployContractExecutionResult } from "@alephium/cli";
import { NetworkId } from "@alephium/web3";
import {
  NFTListing,
  NFTListingInstance,
  NFTMarketPlace,
  NFTMarketPlaceInstance,
  NFT,
  NFTInstance,
  NFTOpenCollection,
  NFTOpenCollectionInstance,
  NFTOpenCollectionWithRoyalty,
  NFTOpenCollectionWithRoyaltyInstance,
  NFTPublicSaleCollectionSequential,
  NFTPublicSaleCollectionSequentialInstance,
  NFTPublicSaleCollectionSequentialWithRoyalty,
  NFTPublicSaleCollectionSequentialWithRoyaltyInstance,
} from ".";
import { default as testnetDeployments } from "../.deployments.testnet.json";
import { default as devnetDeployments } from "../.deployments.devnet.json";

export type Deployments = {
  deployerAddress: string;
  contracts: {
    NFTListing: DeployContractExecutionResult<NFTListingInstance>;
    NFTMarketPlace: DeployContractExecutionResult<NFTMarketPlaceInstance>;
    NFT: DeployContractExecutionResult<NFTInstance>;
    NFTOpenCollection: DeployContractExecutionResult<NFTOpenCollectionInstance>;
    NFTOpenCollectionWithRoyalty: DeployContractExecutionResult<NFTOpenCollectionWithRoyaltyInstance>;
    NFTPublicSaleCollectionSequential: DeployContractExecutionResult<NFTPublicSaleCollectionSequentialInstance>;
    NFTPublicSaleCollectionSequentialWithRoyalty: DeployContractExecutionResult<NFTPublicSaleCollectionSequentialWithRoyaltyInstance>;
  };
};

function toDeployments(json: any): Deployments {
  const contracts = {
    NFTListing: {
      ...json.contracts["NFTListing"],
      contractInstance: NFTListing.at(
        json.contracts["NFTListing"].contractInstance.address
      ),
    },
    NFTMarketPlace: {
      ...json.contracts["NFTMarketPlace"],
      contractInstance: NFTMarketPlace.at(
        json.contracts["NFTMarketPlace"].contractInstance.address
      ),
    },
    NFT: {
      ...json.contracts["NFT"],
      contractInstance: NFT.at(json.contracts["NFT"].contractInstance.address),
    },
    NFTOpenCollection: {
      ...json.contracts["NFTOpenCollection"],
      contractInstance: NFTOpenCollection.at(
        json.contracts["NFTOpenCollection"].contractInstance.address
      ),
    },
    NFTOpenCollectionWithRoyalty: {
      ...json.contracts["NFTOpenCollectionWithRoyalty"],
      contractInstance: NFTOpenCollectionWithRoyalty.at(
        json.contracts["NFTOpenCollectionWithRoyalty"].contractInstance.address
      ),
    },
    NFTPublicSaleCollectionSequential: {
      ...json.contracts["NFTPublicSaleCollectionSequential"],
      contractInstance: NFTPublicSaleCollectionSequential.at(
        json.contracts["NFTPublicSaleCollectionSequential"].contractInstance
          .address
      ),
    },
    NFTPublicSaleCollectionSequentialWithRoyalty: {
      ...json.contracts["NFTPublicSaleCollectionSequentialWithRoyalty"],
      contractInstance: NFTPublicSaleCollectionSequentialWithRoyalty.at(
        json.contracts["NFTPublicSaleCollectionSequentialWithRoyalty"]
          .contractInstance.address
      ),
    },
  };
  return {
    ...json,
    contracts: contracts as Deployments["contracts"],
  };
}

export function loadDeployments(
  networkId: NetworkId,
  deployerAddress?: string
): Deployments {
  const deployments =
    networkId === "testnet"
      ? testnetDeployments
      : networkId === "devnet"
      ? devnetDeployments
      : undefined;
  if (deployments === undefined) {
    throw Error("The contract has not been deployed to the " + networkId);
  }
  const allDeployments = Array.isArray(deployments)
    ? deployments
    : [deployments];
  if (deployerAddress === undefined) {
    if (allDeployments.length > 1) {
      throw Error(
        "The contract has been deployed multiple times on " +
          networkId +
          ", please specify the deployer address"
      );
    } else {
      return toDeployments(allDeployments[0]);
    }
  }
  const result = allDeployments.find(
    (d) => d.deployerAddress === deployerAddress
  );
  if (result === undefined) {
    throw Error("The contract deployment result does not exist");
  }
  return toDeployments(result);
}
