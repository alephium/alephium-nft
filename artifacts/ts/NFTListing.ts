/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as NFTListingContractJson } from "../marketplace/nft_listing.ral.json";

// Custom types for the contract
export namespace NFTListingTypes {
  export type Fields = {
    tokenId: HexString;
    tokenOwner: HexString;
    marketAddress: HexString;
    commissionRate: bigint;
    price: bigint;
  };

  export type State = ContractState<Fields>;
}

class Factory extends ContractFactory<
  NFTListingInstance,
  NFTListingTypes.Fields
> {
  at(address: string): NFTListingInstance {
    return new NFTListingInstance(address);
  }

  async testGetTokenOwnerMethod(
    params: Omit<TestContractParams<NFTListingTypes.Fields, never>, "testArgs">
  ): Promise<TestContractResult<HexString>> {
    return testMethod(this, "getTokenOwner", params);
  }

  async testGetPriceMethod(
    params: Omit<TestContractParams<NFTListingTypes.Fields, never>, "testArgs">
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "getPrice", params);
  }

  async testBuyMethod(
    params: TestContractParams<NFTListingTypes.Fields, { buyer: HexString }>
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "buy", params);
  }

  async testCancelMethod(
    params: Omit<TestContractParams<NFTListingTypes.Fields, never>, "testArgs">
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "cancel", params);
  }

  async testUpdatePriceMethod(
    params: TestContractParams<NFTListingTypes.Fields, { newPrice: bigint }>
  ): Promise<TestContractResult<null>> {
    return testMethod(this, "updatePrice", params);
  }
}

// Use this object to test and deploy the contract
export const NFTListing = new Factory(
  Contract.fromJson(
    NFTListingContractJson,
    "",
    "313d3f5677ef8aa35febd96927b5fcb6466fc884e7a042678f49755dc0c451fa"
  )
);

// Use this class to interact with the blockchain
export class NFTListingInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NFTListingTypes.State> {
    return fetchContractState(NFTListing, this);
  }

  async callGetTokenOwnerMethod(
    params?: Omit<CallContractParams<{}>, "args">
  ): Promise<CallContractResult<HexString>> {
    return callMethod(
      NFTListing,
      this,
      "getTokenOwner",
      params === undefined ? {} : params
    );
  }

  async callGetPriceMethod(
    params?: Omit<CallContractParams<{}>, "args">
  ): Promise<CallContractResult<bigint>> {
    return callMethod(
      NFTListing,
      this,
      "getPrice",
      params === undefined ? {} : params
    );
  }
}
