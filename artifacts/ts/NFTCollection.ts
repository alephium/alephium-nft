/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as NFTCollectionContractJson } from "../nft_collection.ral.json";

// Custom types for the contract
export namespace NFTCollectionTypes {
  export type Fields = {
    nftTemplateId: HexString;
    currentTokenIndex: bigint;
    name: HexString;
    symbol: HexString;
  };

  export type State = ContractState<Fields>;

  export type NFTMintedEvent = ContractEvent<{
    minter: HexString;
    collectionId: HexString;
    uri: HexString;
    tokenId: HexString;
    tokenIndex: HexString;
  }>;
}

class Factory extends ContractFactory<
  NFTCollectionInstance,
  NFTCollectionTypes.Fields
> {
  at(address: string): NFTCollectionInstance {
    return new NFTCollectionInstance(address);
  }

  async testGetNameMethod(
    params: Omit<
      TestContractParams<NFTCollectionTypes.Fields, never>,
      "testArgs"
    >
  ): Promise<TestContractResult<HexString>> {
    return testMethod(this, "getName", params);
  }

  async testGetSymbolMethod(
    params: Omit<
      TestContractParams<NFTCollectionTypes.Fields, never>,
      "testArgs"
    >
  ): Promise<TestContractResult<HexString>> {
    return testMethod(this, "getSymbol", params);
  }

  async testTotalSupplyMethod(
    params: Omit<
      TestContractParams<NFTCollectionTypes.Fields, never>,
      "testArgs"
    >
  ): Promise<TestContractResult<bigint>> {
    return testMethod(this, "totalSupply", params);
  }

  async testTokenIdByIndexMethod(
    params: TestContractParams<NFTCollectionTypes.Fields, { index: bigint }>
  ): Promise<TestContractResult<HexString>> {
    return testMethod(this, "tokenIdByIndex", params);
  }

  async testMintMethod(
    params: TestContractParams<NFTCollectionTypes.Fields, { nftUri: HexString }>
  ): Promise<TestContractResult<HexString>> {
    return testMethod(this, "mint", params);
  }
}

// Use this object to test and deploy the contract
export const NFTCollection = new Factory(
  Contract.fromJson(
    NFTCollectionContractJson,
    "",
    "a576ec83eb23ffc285906516af93daf163e9238fc27f3b7827fd96958adbecfd"
  )
);

// Use this class to interact with the blockchain
export class NFTCollectionInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NFTCollectionTypes.State> {
    return fetchContractState(NFTCollection, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeNFTMintedEvent(
    options: SubscribeOptions<NFTCollectionTypes.NFTMintedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTCollection.contract,
      this,
      options,
      "NFTMinted",
      fromCount
    );
  }

  async callGetNameMethod(
    params?: Omit<CallContractParams<{}>, "args">
  ): Promise<CallContractResult<HexString>> {
    return callMethod(
      NFTCollection,
      this,
      "getName",
      params === undefined ? {} : params
    );
  }

  async callGetSymbolMethod(
    params?: Omit<CallContractParams<{}>, "args">
  ): Promise<CallContractResult<HexString>> {
    return callMethod(
      NFTCollection,
      this,
      "getSymbol",
      params === undefined ? {} : params
    );
  }

  async callTotalSupplyMethod(
    params?: Omit<CallContractParams<{}>, "args">
  ): Promise<CallContractResult<bigint>> {
    return callMethod(
      NFTCollection,
      this,
      "totalSupply",
      params === undefined ? {} : params
    );
  }

  async callTokenIdByIndexMethod(
    params: CallContractParams<{ index: bigint }>
  ): Promise<CallContractResult<HexString>> {
    return callMethod(NFTCollection, this, "tokenIdByIndex", params);
  }

  async callMintMethod(
    params: CallContractParams<{ nftUri: HexString }>
  ): Promise<CallContractResult<HexString>> {
    return callMethod(NFTCollection, this, "mint", params);
  }
}
