/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as NFTCollectionContractJson } from "../nft_collection.ral.json";

// Custom types for the contract
export namespace NFTCollectionTypes {
  export type Fields = {
    nftTemplateId: HexString;
    collectionName: HexString;
    collectionDescription: HexString;
    collectionUri: HexString;
  };

  export type State = ContractState<Fields>;

  export type NFTMintedEvent = ContractEvent<{
    minter: HexString;
    collectionAddress: HexString;
    name: HexString;
    description: HexString;
    uri: HexString;
    tokenId: HexString;
    nftContractAddress: HexString;
  }>;

  export interface CallMethodTable {
    mint: {
      params: CallContractParams<{
        nftName: HexString;
        nftDescription: HexString;
        nftUri: HexString;
      }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<
  NFTCollectionInstance,
  NFTCollectionTypes.Fields
> {
  at(address: string): NFTCollectionInstance {
    return new NFTCollectionInstance(address);
  }

  async testMintMethod(
    params: TestContractParams<
      NFTCollectionTypes.Fields,
      { nftName: HexString; nftDescription: HexString; nftUri: HexString }
    >
  ): Promise<TestContractResult<HexString>> {
    return testMethod(this, "mint", params);
  }
}

// Use this object to test and deploy the contract
export const NFTCollection = new Factory(
  Contract.fromJson(
    NFTCollectionContractJson,
    "",
    "df97f4357169d38012417bccaca6ee7940d097752c240787cdf2b32dbc2b596e"
  )
);

// Use this class to interact with the blockchain
export class NFTCollectionInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NFTCollectionTypes.State> {
    return fetchContractState(NFTCollection, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeNFTMintedEvent(
    options: SubscribeOptions<NFTCollectionTypes.NFTMintedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      NFTCollection.contract,
      this,
      options,
      "NFTMinted",
      fromCount
    );
  }

  async callMintMethod(
    params: NFTCollectionTypes.CallMethodParams<"mint">
  ): Promise<NFTCollectionTypes.CallMethodResult<"mint">> {
    return callMethod(NFTCollection, this, "mint", params);
  }

  async multicall<Calls extends NFTCollectionTypes.MultiCallParams>(
    calls: Calls
  ): Promise<NFTCollectionTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      NFTCollection,
      this,
      calls
    )) as NFTCollectionTypes.MultiCallResults<Calls>;
  }
}
