/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  SubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
} from "@alephium/web3";
import { default as NFTContractJson } from "../nft/nft.ral.json";

// Custom types for the contract
export namespace NFTTypes {
  export type Fields = {
    uri: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getTokenUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
}

class Factory extends ContractFactory<NFTInstance, NFTTypes.Fields> {
  at(address: string): NFTInstance {
    return new NFTInstance(address);
  }

  async testGetTokenUriMethod(
    params: Omit<TestContractParams<NFTTypes.Fields, never>, "testArgs">
  ): Promise<TestContractResult<HexString>> {
    return testMethod(this, "getTokenUri", params);
  }
}

// Use this object to test and deploy the contract
export const NFT = new Factory(
  Contract.fromJson(
    NFTContractJson,
    "",
    "e4ac1069a1aea968d177741c290e109285ba3771c8df9c94e07d80d328a4c0c3"
  )
);

// Use this class to interact with the blockchain
export class NFTInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<NFTTypes.State> {
    return fetchContractState(NFT, this);
  }

  async callGetTokenUriMethod(
    params?: NFTTypes.CallMethodParams<"getTokenUri">
  ): Promise<NFTTypes.CallMethodResult<"getTokenUri">> {
    return callMethod(
      NFT,
      this,
      "getTokenUri",
      params === undefined ? {} : params
    );
  }

  async multicall<Calls extends NFTTypes.MultiCallParams>(
    calls: Calls
  ): Promise<NFTTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      NFT,
      this,
      calls
    )) as NFTTypes.MultiCallResults<Calls>;
  }
}
