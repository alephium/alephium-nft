# Install dependencies only when needed
FROM node:16.15.0-alpine AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
RUN apk add --no-cache sqlite
RUN apk add --no-cache python3
RUN apk add --no-cache make
RUN apk add --no-cache build-base
WORKDIR /
COPY ./backend/package.json /backend/package.json
COPY ./package.json ./yarn.lock ./
RUN yarn install --frozen-lockfile

# Rebuild the source code only when needed
FROM node:16.15.0-alpine AS builder
WORKDIR /backend
COPY ./backend .
COPY ./configs /configs
COPY ./artifacts /artifacts
COPY ./shared /shared
COPY --from=deps /node_modules /node_modules
RUN yarn build

# Production image, copy all the files and run backend
FROM node:16.15.0-alpine AS runner
WORKDIR /backend
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

COPY --from=builder /artifacts /artifacts
COPY --from=builder /configs /configs
COPY --from=builder /shared /shared
COPY --from=builder /node_modules ./node_modules
COPY --from=builder /backend/mongodb ./mongodb
COPY --from=builder /backend/subscription ./subscription
COPY --from=builder /backend/index.ts ./index.ts
COPY --from=builder --chown=nodejs:nodejs /backend/dist ./dist
COPY --from=builder /backend/package.json ./package.json

USER nodejs

# Expose
EXPOSE 3019

CMD ["yarn", "start"]