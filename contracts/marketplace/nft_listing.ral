Contract NFTListing(
    tokenId: ByteVec,
    tokenOwner: Address,
    marketContractId: ByteVec,
    commissionRate: U256,
    royalty: Bool,
    mut price: U256
) extends NFTMarketPlaceUtils() {

    enum ErrorCodes {
        MarketplaceAllowedOnly = 0
    }

    pub fn getTokenOwner() -> Address {
        return tokenOwner
    }

    pub fn getPrice() -> U256 {
        return price
    }

    pub fn getCommissionRate() -> U256 {
        return commissionRate
    }

    pub fn requiresRoyalty() -> Bool {
        return royalty
    }

    @using(checkExternalCaller = false)
    pub fn royaltyAmount(collectionId: ByteVec) -> U256 {
        return getRoyaltyAmount(tokenId, collectionId, price, royalty)
    }

    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn buy(buyer: Address, priceAfterFee: U256) -> () {
        checkCaller!(callerContractId!() == marketContractId, ErrorCodes.MarketplaceAllowedOnly)
        transferToken!(buyer, tokenOwner, ALPH, priceAfterFee)
        transferTokenFromSelf!(buyer, tokenId, 1)
        destroySelf!(tokenOwner)
    }

    @using(assetsInContract = true)
    pub fn cancel() -> () {
        checkCaller!(callerContractId!() == marketContractId, ErrorCodes.MarketplaceAllowedOnly)
        destroySelf!(tokenOwner)
    }

    @using(updateFields = true)
    pub fn updatePrice(newPrice: U256) -> () {
        checkCaller!(callerContractId!() == marketContractId, ErrorCodes.MarketplaceAllowedOnly)
        price = newPrice
    }
}
