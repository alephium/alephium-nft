// The concept of a collection, which could contain different NFTs
// e.g. Bored Ape Yacht Club collection
Contract NFTCollection(
    nftTemplateId: ByteVec,
    mut currentTokenIndex: U256,
    @unused name: ByteVec,
    @unused symbol: ByteVec
) implements INFTCollection {
    enum ErrorCodes {
        IncorrectTokenIndex = 0
    }

    pub fn getName() -> ByteVec {
        return name
    }

    pub fn getSymbol() -> ByteVec {
        return symbol
    }

    // Lets say only 10000 NFTs
    pub fn totalSupply() -> U256 {
        return 10000
    }

    pub fn nftByIndex(index: U256) -> (ByteVec, Bool) {
        checkCaller!(index < totalSupply(), ErrorCodes.IncorrectTokenIndex)
        let nftTokenId = subContractId!(toByteVec!(index))
        return nftTokenId, contractExists!(nftTokenId)
    }

    @using(preapprovedAssets = true, updateFields = true)
    pub fn mint(nftUri: ByteVec) -> (ByteVec) {
        let minter = callerAddress!()

        let collectionId = selfContractId!()

        let initialMutState = encodeToByteVec!(
            minter,
            true
        )

        let initialImmState = encodeToByteVec!(
            nftUri,
            collectionId,
            currentTokenIndex
        )

        let contractId = copyCreateSubContractWithToken!{minter -> ALPH: 1 alph}(
            toByteVec!(currentTokenIndex),
            nftTemplateId,
            initialImmState,
            initialMutState,
            1,
            minter
        )

        emit Minted(minter, currentTokenIndex)

        currentTokenIndex = currentTokenIndex + 1

        return contractId
    }
}