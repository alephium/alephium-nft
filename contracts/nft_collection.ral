// The concept of a collection, which could contain different NFTs
// e.g. Bored Ape Yacht Club collection
Contract NFTCollection(
    nftTemplateId: ByteVec,
    mut currentTokenIndex: U256,
    @unused name: ByteVec,
    @unused symbol: ByteVec
) {
    event NFTMinted(
      minter: Address,
      collectionId: ByteVec,
      uri: ByteVec,
      tokenId: ByteVec,
      tokenIndex: ByteVec
    )

    enum ErrorCodes {
        IncorrectTokenIndex = 0
    }

    pub fn getName() -> ByteVec {
        return name
    }

    pub fn getSymbol() -> ByteVec {
        return symbol
    }

    // Lets say only 10000 NFTs
    pub fn totalSupply() -> U256 {
        return 10000
    }

    pub fn tokenIdByIndex(index: U256) -> ByteVec {
        assert!(index < totalSupply(), ErrorCodes.IncorrectTokenIndex)
        return subContractId!(toByteVec!(index))
    }

    @using(preapprovedAssets = true, updateFields = true)
    pub fn mint(nftUri: ByteVec) -> (ByteVec) {
        let minter = callerAddress!()

        let collectionId = selfContractId!()

        let initialMutState = encodeToByteVec!(
            minter,
            true
        )

        let initialImmState = encodeToByteVec!(
            nftUri,
            collectionId,
            currentTokenIndex
        )

        let contractId = copyCreateSubContractWithToken!{minter -> ALPH: 1 alph}(
            toByteVec!(currentTokenIndex),
            nftTemplateId,
            initialImmState,
            initialMutState,
            1,
            minter
        )

        emit NFTMinted(
            minter,
            collectionId,
            nftUri,
            contractId,
            toByteVec!(currentTokenIndex)
        )

        currentTokenIndex = currentTokenIndex + 1

        return contractId
    }
}