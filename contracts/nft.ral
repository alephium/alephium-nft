// Who can change the metadata of this NFT? Maybe it should just be fixed
// when it is created, to reduce complexity
// Right now only 1 token is supported
Contract NFT(
    mut owner: Address,
    mut isTokenWithdrawn: Bool,
    name: ByteVec,
    description: ByteVec,
    uri: ByteVec,                 // name; description; image
    collectionAddress: Address    // The collection address, 0 when no collection
) {

    event NFTOwnerUpdated(
      previousOwner: Address,
      newOwner: Address
    )

    event NFTWithdrawn(
      owner: Address
    )

    event NFTDeposited(
      owner: Address
    )

    event NFTBurnt(
      owner: Address
    )

    enum ErrorCodes {
        OwnerAllowedOnly = 0
        TokenAlreadyWithdrawn = 1
        TokenAlreadyDeposited = 2
    }

    @using(checkExternalCaller = false, updateFields = false)
    pub fn getMetadata() -> (ByteVec, ByteVec, ByteVec, Address) {
        return name, description, uri, collectionAddress
    }

    @using(checkExternalCaller = false, updateFields = false)
    pub fn getOwner() -> (Address) {
        return owner
    }

    pub fn transferOwnership(newOwner: Address) -> () {
        checkCaller!(callerAddress!() == owner, ErrorCodes.OwnerAllowedOnly)
        updateOwner(newOwner)
    }

    @using(preapprovedAssets = true)
    pub fn transferOwnershipAndAsset(newOwner: Address) -> () {
        checkCaller!(callerAddress!() == owner, ErrorCodes.OwnerAllowedOnly)
        updateOwner(newOwner)
        transferToken!(newOwner, owner, ALPH, 1 alph)
    }

    @using(updateFields = true)
    fn updateOwner(newOwner: Address) -> () {
        // Token needs to be owned by the contract when owner is changed
        assert!(!isTokenWithdrawn, ErrorCodes.TokenAlreadyWithdrawn)
        emit NFTOwnerUpdated(owner, newOwner)
        owner = newOwner
    }

    @using(preapprovedAssets=true, assetsInContract = true, updateFields = true)
    pub fn deposit() -> () {
        assert!(isTokenWithdrawn, ErrorCodes.TokenAlreadyDeposited)

        let depositor = callerAddress!()
        if (depositor != owner) {
            emit NFTOwnerUpdated(owner, depositor)
            owner = depositor
        }

        isTokenWithdrawn = false
        emit NFTDeposited(depositor)

        transferTokenToSelf!(depositor, selfContractId!(), 1)
    }

    @using(assetsInContract = true, updateFields = true)
    pub fn withdraw() -> () {
        assert!(callerAddress!() == owner, ErrorCodes.OwnerAllowedOnly)
        assert!(!isTokenWithdrawn, ErrorCodes.TokenAlreadyWithdrawn)

        isTokenWithdrawn = true
        emit NFTWithdrawn(owner)

        transferTokenFromSelf!(owner, selfContractId!(), 1)
    }

    @using(assetsInContract = true, updateFields = false)
    pub fn burn() -> () {
        assert!(callerAddress!() == owner, ErrorCodes.OwnerAllowedOnly)

        // Token needs to be owned by the contract when NFT is burnt
        assert!(!isTokenWithdrawn, ErrorCodes.TokenAlreadyWithdrawn)

        emit NFTBurnt(owner)

        burnToken!(selfAddress!(), selfContractId!(), 1)
        destroySelf!(owner)
    }
}
