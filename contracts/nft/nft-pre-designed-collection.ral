// This is for the scenario where an artist or AI creates a set of arts
// in advance and sell to the public for minting
Contract NFTPreDesignedCollection(
    enumerableNftTemplateId: ByteVec,
    collectionUri: ByteVec,
    tokenBaseUri: ByteVec,
    mut totalSupply: U256
) extends NFTCollectionBase(collectionUri, totalSupply) {

    // TODO Add some comments
    @using(preapprovedAssets = true, updateFields = true)
    pub fn mint() -> (ByteVec) {
        let minter = callerAddress!()
        let initialImmState = EnumerableNFT.encodeImmFields!(
            NFTPreDesignedCollection(selfContractId!()),
            totalSupply
        )

        let contractId = copyCreateSubContractWithToken!{minter -> ALPH: 1 alph}(
            toByteVec!(totalSupply),
            enumerableNftTemplateId,
            initialImmState,
            #00,
            1,
            minter
        )

        totalSupply = totalSupply + 1
        return contractId
    }

    pub fn getTokenUri(index: U256) -> ByteVec {
        assert!(index < totalSupply, ErrorCodes.IncorrectTokenIndex)
        return tokenBaseUri ++ u256ToString!(index)
    }
}