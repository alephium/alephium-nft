// This is for the scenario where an artist or AI creates a set of arts
// in advance and sell to the public for minting
Contract NFTPreDesignedCollection(
    nftTemplateId: ByteVec,
    name: ByteVec,
    symbol: ByteVec,
    totalSupply: U256,
    baseUri: ByteVec
) extends NFTCollectionBase(name, symbol, totalSupply) {
    @using(preapprovedAssets = true)
    pub fn mint(tokenIndex: U256) -> (ByteVec) {
        assert!(tokenIndex < totalSupply(), ErrorCodes.IncorrectTokenIndex)
        let minter = callerAddress!()
        let collectionId = selfContractId!()
        let nftUri = baseUri ++ u256ToString!(tokenIndex)

        let initialMutState = encodeToByteVec!(minter, true)
        let initialImmState = encodeToByteVec!(nftUri, collectionId, tokenIndex)

        let contractId = copyCreateSubContractWithToken!{minter -> ALPH: 1 alph}(
            toByteVec!(tokenIndex),
            nftTemplateId,
            initialImmState,
            initialMutState,
            1,
            minter
        )

        emit Minted(minter, tokenIndex, contractId)
        return contractId
    }
}