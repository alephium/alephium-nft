// This is for the scenario where an artist or AI creates a set of arts
// in advance and sell to the public for minting
Contract NFTPreDesignedCollection(
    enumerableNftTemplateId: ByteVec,
    collectionUri: ByteVec,
    collectionOwner: Address,
    tokenBaseUri: ByteVec,
    maxSupply: U256,
    mintPrice: U256,
    mut totalSupply: U256
) extends NFTCollectionBase(collectionUri, totalSupply) {
    @using(preapprovedAssets = true, updateFields = true, assetsInContract = true)
    pub fn mint(index: U256) -> (ByteVec) {
        checkCaller!(index < maxSupply, ErrorCodes.IncorrectTokenIndex)

        let minter = callerAddress!()
        let (encodeImmutableFields, encodeMutableFields) = EnumerableNFT.encodeFields!(selfContract!(), totalSupply)

        let contractId = copyCreateSubContractWithToken!{minter -> ALPH: 1 alph}(
            toByteVec!(totalSupply),
            enumerableNftTemplateId,
            encodeImmutableFields,
            encodeMutableFields,
            1,
            minter
        )

        transferTokenToSelf!(minter, ALPH, mintPrice)

        totalSupply = totalSupply + 1
        return contractId
    }

    pub fn getTokenUri(index: U256) -> ByteVec {
        assert!(index < maxSupply, ErrorCodes.IncorrectTokenIndex)
        return tokenBaseUri ++ u256ToString!(index)
    }

    pub fn getCollectionOwner() -> Address {
        return collectionOwner
    }

    pub fn getMaxSupply() -> U256 {
        return maxSupply
    }

    pub fn getMintPrice() -> U256 {
        return mintPrice
    }

    @using(assetsInContract = true)
    pub fn withdraw(to: Address, amount: U256) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.TokenOwnerAllowedOnly)
        transferTokenFromSelf!(to, ALPH, amount)
    }
}
