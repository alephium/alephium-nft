// in advance and sell to the public for minting, users can mint the arts
// in the collection sequentially by paying the mint price.
Contract NFTPublicSaleCollectionSequential(
    enumerableNftTemplateId: ByteVec,
    collectionUri: ByteVec,
    nftBaseUri: ByteVec,
    collectionOwner: Address,
    maxSupply: U256,
    mut totalSupply: U256
) extends NFTCollectionBase(collectionUri, totalSupply), NFTPublicSaleCollection(nftBaseUri, maxSupply){
    @using(preapprovedAssets = true, updateFields = true)
    pub fn mint() -> (ByteVec) {
        let minter = callerAddress!()
        checkCaller!(minter == collectionOwner, ErrorCodes.TokenOwnerAllowedOnly)

        let (encodeImmutableFields, encodeMutableFields) = EnumerableNFT.encodeFields!(selfContractId!(), getNFTUri(totalSupply), totalSupply)

        let contractId = copyCreateSubContractWithToken!{minter -> ALPH: 1 alph}(
            toByteVec!(totalSupply),
            enumerableNftTemplateId,
            encodeImmutableFields,
            encodeMutableFields,
            1,
            minter
        )

        totalSupply = totalSupply + 1
        return contractId
    }

    @using(assetsInContract = true)
    pub fn withdraw(to: Address, amount: U256) -> () {
        checkCaller!(callerAddress!() == collectionOwner, ErrorCodes.TokenOwnerAllowedOnly)
        transferTokenFromSelf!(to, ALPH, amount)
    }
}