// This is for the scenario where an artist or AI creates a set of arts
// in advance and sell to the public for minting, users can mint any of
// the arts in the collection by paying the mint price.
Abstract Contract NFTPublicSaleCollectionRandomBase(
    nftTemplateId: ByteVec,
    collectionUri: ByteVec,
    collectionOwner: Address,
    nftBaseUri: ByteVec,
    maxSupply: U256,
    mintPrice: U256,
    mut totalSupply: U256
) extends NFTCollectionBase(collectionUri, totalSupply), NFTPublicSaleCollectionBase(nftBaseUri, maxSupply, mintPrice) {
    event Mint(minter: Address, index: U256)

    enum ErrorCodes {
        IncorrectTokenIndex = 2
    }

    @using(preapprovedAssets = true, updateFields = true, assetsInContract = true, checkExternalCaller = false)
    pub fn mint(index: U256) -> (ByteVec) {
        assert!(index < maxSupply, ErrorCodes.IncorrectTokenIndex)

        let minter = callerAddress!()
        let (encodeImmutableFields, encodeMutableFields) = NFT.encodeFields!(getNFTUri(index), index)

        let contractId = copyCreateSubContractWithToken!{minter -> ALPH: 1 alph}(
            toByteVec!(index),
            nftTemplateId,
            encodeImmutableFields,
            encodeMutableFields,
            1,
            minter
        )

        transferTokenToSelf!(minter, ALPH, mintPrice)

        totalSupply = totalSupply + 1

        emit Mint(minter, index)
        return contractId
    }

    pub fn getCollectionOwner() -> Address {
        return collectionOwner
    }

    pub fn getMaxSupply() -> U256 {
        return maxSupply
    }
}
