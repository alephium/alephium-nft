import "nft_listing.ral"

TxContract NFTMarketPlace(
    nftListingByteCode: ByteVec,
    mut admin: Address,
    mut listingPrice: U256,
    mut commissionRate: U256   // basis point. e.g. 2.5% == 250 basis point
) {

    event NFTListed(
      price: U256,
      tokenId: ByteVec,
      tokenOwner: Address,
      listingContractId: ByteVec,
      listingContractAddress: Address
    )

    event AdminUpdated(
        previous: Address,
        new: Address
    )

    event ListingPriceUpdated(
        previous: U256,
        new: U256
    )

    event CommissionRateUpdated(
        previous: U256,
        new: U256
    )

    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn buyNFT(
        nftListingContractId: ByteVec,
        totalPayment: U256
    ) -> () {
        let nftListing = NFTListing(nftListingContractId)
        let buyer = callerAddress!()
        nftListing.buy{buyer -> totalPayment}(buyer)
    }


    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn listNFT(
        tokenId: ByteVec,
        price: U256
    ) -> (Address) {
        assert!(price > 0)
        let tokenOwner = callerAddress!()

        let initialState = encodeToByteVec!(
            price,
            tokenId,
            tokenOwner,
            selfAddress!(),
            commissionRate
        )

        // Create the listing contract
        let nftListingContractId = createSubContract!{tokenOwner -> 1.1 alph}(tokenId, nftListingByteCode, initialState)
        let nftListingContractAddress = contractIdToAddress!(nftListingContractId)

        // Charge the listing fee
        transferAlphToSelf!(tokenOwner, listingPrice)

        emit NFTListed(
            price,
            tokenId,
            tokenOwner,
            nftListingContractId,
            nftListingContractAddress
        )

        return nftListingContractAddress
    }

    pub fn updateAdmin(newAdmin: Address) -> () {
        assert!(callerAddress!() == admin)

        emit AdminUpdated(admin, newAdmin)
        admin = newAdmin
    }

    pub fn updateListingPrice(newListingPrice: U256) -> () {
        assert!(callerAddress!() == admin)

        emit ListingPriceUpdated(listingPrice, newListingPrice)
        listingPrice = newListingPrice
    }

    pub fn updateCommissionRate(newCommissionRate: U256) -> () {
        assert!(callerAddress!() == admin)

        emit CommissionRateUpdated(commissionRate, newCommissionRate)
        commissionRate = newCommissionRate
    }
}