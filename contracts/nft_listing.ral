Contract NFTListing(
    mut price: U256,
    tokenId: ByteVec,
    tokenOwner: Address,
    marketAddress: Address,
    commissionRate: U256
) {

    enum ErrorCodes {
        MarketplaceAllowedOnly = 0
    }

    @using(checkExternalCaller = false, updateFields = false)
    pub fn getTokenOwner() -> Address {
        return tokenOwner
    }

    @using(checkExternalCaller = false, updateFields = false)
    pub fn getPrice() -> U256 {
        return price
    }

    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn buy(buyer: Address) -> () {
        checkCaller!(callerAddress!() == marketAddress, ErrorCodes.MarketplaceAllowedOnly)

        // Charge a commission for the marketplace
        let commission = (price * commissionRate) / 10000
        if (commission > 0) {
            NFTMarketPlace(callerContractId!()).payCommission{
                buyer -> ALPH: commission
            }(buyer, commission)
        }

        if (buyer != tokenOwner) {
            transferToken!(buyer, tokenOwner, ALPH, price)
        }

        NFT(tokenId).transferOwnershipAndAsset{buyer -> ALPH: 1 alph}(buyer)

        destroySelf!(tokenOwner)
    }

    @using(assetsInContract = true)
    pub fn cancel() -> () {
        checkCaller!(callerAddress!() == marketAddress, ErrorCodes.MarketplaceAllowedOnly)

        let nft = NFT(tokenId)
        nft.transferOwnership(tokenOwner)

        destroySelf!(tokenOwner)
    }

    @using(updateFields = true)
    pub fn updatePrice(newPrice: U256) -> () {
        checkCaller!(callerAddress!() == marketAddress, ErrorCodes.MarketplaceAllowedOnly)
        price = newPrice
    }
}
