import "nft.ral"

TxContract NFTListing(
    mut price: U256,
    tokenId: ByteVec,
    tokenOwner: Address,
    marketAddress: Address,
    commissionRate: U256
) {
    event NFTListingPriceUpdated(
       tokenId: ByteVec,
       oldPrice: U256,
       newPrice: U256
    )

    event NFTSold(
      price: U256,
      tokenId: ByteVec,
      previousOwner: Address,
      newOwner: Address
    )

    event NFTListingCancelled(
      tokenId: ByteVec,
      tokenOwner: Address
    )

    pub fn getMetadata() -> (U256, ByteVec, Address, Address) {
        return price, tokenId, tokenOwner, marketAddress
    }

    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn buy(buyer: Address) -> () {
        // Charge a commission for the marketplace
        let commission = (price * commissionRate) / 10000
        if (commission > 0) {
            // NOTE: Fails here if buy directly from NFTListing instead
            // of going through the market place.
            transferAlph!(buyer, marketAddress, commission)
        }

        if (buyer != tokenOwner) {
            transferAlph!(buyer, tokenOwner, price)
        }

        let nft = NFT(tokenId)
        nft.updateOwner(buyer)

        emit NFTSold(price, tokenId, tokenOwner, buyer)

        destroySelf!(tokenOwner)
    }

    @using(assetsInContract = true)
    pub fn cancel() -> () {
        assert!(callerAddress!() == tokenOwner)

        let nft = NFT(tokenId)
        nft.updateOwner(tokenOwner)

        emit NFTListingCancelled(tokenId, tokenOwner)

        destroySelf!(tokenOwner)
    }

    pub fn updatePrice(newPrice: U256) -> () {
        assert!(callerAddress!() == tokenOwner)

        emit NFTListingPriceUpdated(tokenId, price, newPrice)

        price = newPrice
    }
}